== Decentralized Applications (Dapps)

== What is a Dapp?

== Components of a Dapp

=== Blockchain (Smart Contracts)

=== Front End (Web UI)

=== Data Storage

==== On Chain vs. Off Chain data

==== IPFS

==== Swarm

Swarm home page; http://swarm-gateways.net/bzz:/theswarm.eth/

Read the docs; https://swarm-guide.readthedocs.io/en/latest/index.html

Swarm developer's onboarding guide; https://github.com/ethersphere/swarm/wiki/swarm

The swarm engine room; https://gitter.im/ethersphere/orange-lounge

Similarities/differences between Ethereum's Swarm and IPFS; https://github.com/ethersphere/go-ethereum/wiki/IPFS-&-SWARM

==== Centralized dB

=== Inter-Dapp Communications Protocol

==== Whisper

https://github.com/ethereum/wiki/wiki/Whisper

https://github.com/ethereum/wiki/wiki/Whisper-Overview

== Dapp Frameworks

=== Truffle
Truffle is a popular choice and provides a manageable development environment, testing framework and asset pipeline for Ethereum. 

With Truffle, you get:

* Built-in smart contract compilation, linking, deployment and binary management.
* Automated contract testing with Mocha and Chai.
* Configurable build pipeline with support for custom build processes.
* Scriptable deployment & migrations framework.
* Network management for deploying to many public & private networks.
* Interactive console for direct contract communication.
* Instant rebuilding of assets during development.
* External script runner that executes scripts within a Truffle environment.

Getting Started & Documentation; http://truffleframework.com/docs

Github link; https://github.com/trufflesuite/truffle

Website link; https://truffleframework.com

=== Embark
The Embark Framework focuses on serverless Decentralized Applications using Ethereum, IPFS and other platforms. Embark currently integrates with EVM blockchains (Ethereum), Decentralized Storages (IPFS), and Decentralized communication platforms (Whisper and Orbit).

With Embark you can:

** Blockchain (Ethereum)
* Automatically deploy contracts and make them available in your JS code. Embark watches for changes, and if you update a contract, Embark will automatically redeploy the contracts (if needed) and the dapp.
* Contracts are available in JS with Promises.
* Do Test Driven Development with Contracts using Javascript.
* Keep track of deployed contracts; deploy only when truly needed.
* Manage different chains (e.g testnet, private net, livenet)
* Easily manage complex systems of interdependent contracts.

** Decentralized Storage (IPFS)
* Easily Store & Retrieve Data on the DApp through EmbarkJS. Including uploading and retrieving files.
* Deploy the full application to IPFS or Swarm.


** Decentralized Communication (Whisper, Orbit)
* Easily send/receive messages through channels in P2P through Whisper or Orbit.

** Web Technologies
* Integrate with any web technology including React, Foundation, etc..
* Use any build pipeline or tool you wish, including grunt, gulp and webpack.

Getting Started & Documentation; https://embark.readthedocs.io

Github link; https://github.com/embark-framework/embark

Website link; https://github.com/embark-framework/embark
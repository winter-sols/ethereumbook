[[decentralized_applications_chap]]
== Decentralized Applications (DApps)

The peer-to-peer movement has enabled millions of Internet users to connect together. +USENET+, a distributed messaging system that is described as the first peer-to-peer architecture, was established in 1979 as the successor of the first 'Internet', +ARPANET+. +ARPANET+ was a client-server network where participants ran nodes requesting and serving content, but, as it lacked the ability to provide any means for context beyond simple address-based routing, +USENET+ emerged, promising to enforce a decentralized model of control. The +USENET+ model was a client-server model from the user (or client) perspective, but offered a self-organizing approach to the newsgroup servers. This made news servers communicate with one another as peers to propagate +USENET+ news articles over the entire group of network servers. This is also like SMTP email, in which the core e-mail-relaying network of mail transfer agents has a peer-to-peer character, in contrast to the periphery of e-mail clients and their direct connections which is strictly a client-server relationship.

In 1999 the famous music- and file-sharing application called Napster arose. Napster was the beginning of the peer-to-peer networks movement evolving into BitTorrent, where participating users established a virtual network, entirely independent from the physical network and without having to obey any administrative authorities or restrictions.

As peer-to-peer mechanisms can be used to access any kind of distributed resources, they play a central role in decentralized applications.

////
Source: https://en.wikipedia.org/wiki/Peer-to-peer
License: CC0
Added by: @dcoldeira
////

[[what_is_a_dapp_sec]]
=== What is a DApp?

Unlike a traditional software application, a Decentralized Application (DApp) does not belong only to one single provider or server. Instead, the whole stack is deployed and operated in a distributed fashion on a peer-to-peer (p2p) network.

A typical DApp stack would consist of front-end, back-end and data storage. There are many advantages to creating a DApp that a typical centralized architecture can not provide:

1) Resiliency: by having the business-logic controlled by a smart contract, a DApp back-end will be fully distributed and managed on a blockchain platform. Unlike deploying an application on a centralized server, a DApp will have no downtime and will continue to persist as long as the platform is still operating.

2) Transparency: the on-chain nature of a DApp allows everyone to inspect the code and be more sure about its function. On the same note, any interaction with the the DApp will be stored forever in the blockchain state history.

3) Censorship Resistance: as long as a user has access to an Ethereum node (running one if necessary), the user will always be able to interact with a DApp without interference from any centralized control. No service provider, or even the owner of the smart contract, could alter the code once it is deployed on the network.

It is worth noting that once deployed, any smart contract becomes fully publicly viewable, and so anyone can take the contract's bytecode and re-deploy it themselves. This makes developing successful business models more difficult in the context of blockchain platforms. Nonetheless, the other attributes of such platforms more than off-set such a narrow detriment.

It is also worth noting that it may not be possible to de-compile the bytecode into high-level source code and fully understand the contract's code. Developers who seek to offer full transparency about the contract behavior must publish the source code for users to read, compile and verify.


[[components_of_a_dapp_sec]]
=== Components of a DApp

A DApp comprises several key components:

* Decentralized (i.e. on-chain) computation, related state, and value transfer, aka smart contracts
* Decentralized data storage, such as IPFS or Swarm
* Decentralized messaging, such as Whisper
* User front-end interface(s), usually written in the same languages as web interfaces and rendered in a web browser

In the Ethereum ecosystem as it stands today, there are very few truly decentralized apps - most still rely on centralized service and servers for some part of their operation. For example, the storage of front-end assets on servers owned and operated by the developer, or the provision of "real-world" information, such as the current price of ether. In the future, we expect that it will be possible for every part of any DApp to be operated in a truly and fully decentralized way, including access to "real world" data, such as price info or weather data. Data providers in our blockchain context are called "oracles" and provide a not insignificant challenge to the move to decentralization. Nevertheless, we are already on the way with the launch of Augur and other similar stake-based oracle services. We discuss this approach more elsewhere in this book.

[[blockchain_smart_contracts_sec]]
==== On-chain Computation (Smart Contracts)

The smart contract is used to store the business logic (program code) and the related state of your decentralized application; in the first instance, you can think of a smart contract as a server-side component in a regular application. Of course, it is more than this and less than this, but as a starting point, it is an adequate way of getting a handle on DApp architecture. One of the main differences is that any computation executed in a smart contract is very expensive and so should be kept as minimal as possible.

The designing Ethereum DApp architecture can go well beyond simple decision tree logic: Ethereum smart contracts allow you to build almost arbitrarily complex architectures in which a network of smart contracts call and pass data between each other, reading and writing their own state variables as they go. We have to add "almost" in our description, because the amount of computation that can be done in one atomic unit (transaction) will always be limited to some degree, as specified by the (possibly very large) block gas limit. After deploying your smart contract, your business logic could well be used by many other developers in the future, without ever requiring you to manage or maintain the code, which is nice.

One major consideration of smart contract architecture design is the inability to change the code of a smart contract once it is deployed. It can be deleted if it is programmed with an accessible +SELFDESTRUCT+ opcode, but other than complete removal, the code cannot be changed in any way. One reason why the Ethereum platform is designed this way is to maximize the degree to which users can know what smart-contract based services will do; it would undermine this to allow smart contract code to be replaced in any way after creation. For example, a contract owner could write a contract that accepts ether deposits which will be returned in full after a fixed period of time, then wait until someone issues a transaction to deposit a large amount and change the code to allow them to withdraw the whole deposit for themselves. This is clearly a wholly undesirable feature for an otherwise immutable smart contract platform.

Nevertheless, it is possible for a smart contract to call into other smart contracts as specified by a contract state variable, thus allowing for the switching of which other contract code is called and giving a maintenance and upgrade path for DApps. You may wonder, after thinking about the malign example above, why anyone would ever use a contract that they can see allows for parts of its operation to be changed; the difference is that fixed code contracts must explicitly specify exactly how and to what extent they rely on possible code changes. For example, a DApp can make contract call address changes only after being approved by a special council or user vote, or they can be architected to separate computation from any ether spending, making it so any deposit you have given it always needs your approval before being transferred. Great care is needed when employing this strategy, but it is very powerful.

The second major consideration of smart contract architecture design is DApp size; a really large monolithic smart contract may cost a lot of gas to deploy and use. Therefore, some applications may choose to have off chain computation and an external data source. Keep in mind, however, that having the core business logic of the DApp be dependent on external data (e.g. from a centralized server) would mean your users will have to trust these externalities. The marketing to acquire this trust could end up being more costly than paying for on-chain resources. An interesting balance.

[[front_end_web_ui_cec]]
==== Front end (Web User Interface (UI))

Unlike the business logic of the DApp that requires a developer to understand the EVM and new languages such as Solidity, the client side interface of a DApp can use only basic web front end technologies (HTML, CSS, JavaScript, etc). This allows a traditional web developer to utilize the tools, libraries and frameworks they are familiar with using on a regular basis. Interactions with the DApp such as signing messages, sending transactions and key management are often conducted through the browser itself using tools such as Mist browser or the Metamask browser extension.

Although it is possible to create a mobile DApp as well, currently there are few resources to help create mobile DApp front-ends, mainly due to the lack of mobile clients that can serve as a light client with key management functionality.

[[data_storage_sec]]
==== Data storage

Due to high gas costs and the currently low block gas limit, smart contracts are not suited to store or process large amounts of data. Hence, most DApps will utilize off-chain data storage services. Ideally, a DApp should use decentralized storage platforms, such as IPFS or Swarm. This is ideal for storing and distributing large static assets such as images, videos, and the rest of the client side application (HTML, CSS, JavaScript, etc).

Decentralized storage platforms work by using hashes of the file contents as file handles for reference and retrieval. The hashes of the content (or derivatives thereof) are often stored as bytes within the smart contract so that a user can be sure they are being served the correct content.


[[on_chain_vs_off_chain_data_sec]]
===== On-chain vs. off-chain

////
TODO: add paragraph
////

[[ipfs_sec]]
===== IPFS

////
TODO: add paragraph
////

[[swarm_sec]]
===== Swarm

Swarm is a decentralized data dissemination protocol. Here are pointers to resources where you can find out more:

* Swarm home page: http://swarm-gateways.net/bzz:/theswarm.eth/
* Read the docs: https://swarm-guide.readthedocs.io/en/latest/index.html
* Swarm developer's onboarding guide: https://github.com/ethersphere/swarm/wiki/swarm
* The swarm engine room: https://gitter.im/ethersphere/orange-lounge
* Similarities/differences between Ethereum's Swarm and IPFS: https://github.com/ethersphere/go-ethereum/wiki/IPFS-&-SWARM

[[centralized_db_sec]]
===== Centralized DB

Centralized databases are data stored on a server with some semantic indexing for fast retrieval. They use a client-server network architecture and can allow users to modify the data that is stored. Being centralized means that the problem of coordination of data changes by users is made much easier, compared with the same situation in a decentralized context. Furthermore, access control (e.g. read or write privileges) can be also easily managed and operated. However, the centralization means that attach vectors can be more focussed in comparison to decentralized systems, meaning access to and control of the data held can be compromised with potentially simple and inexpensive techniques (such as social engineering).

////
Source:
https://dcoldeira.github.io/database-the-decentralized-control-revolution.html
License: CC0
Added by: @dcoldeira
////

[[oracle_sec]]
===== Oracle

////
TODO: add paragraph
////

[[interdapp_coammunications_protocol_sec]]
==== Inter-DApp communications protocol



[[whisper_sec]]
===== Whisper

////
TODO: add paragraph
////
https://github.com/ethereum/wiki/wiki/Whisper

https://github.com/ethereum/wiki/wiki/Whisper-Overview

[[dapp_frameworks_sec]]
=== DApp frameworks

There are many different Development frameworks and libraries written in many languages which allows for a better developer experience in creating and deploying a DApp.

[[truffle_sec]]
==== Truffle
Truffle is a DApp development environment. It is a popular choice and provides an application management environment, testing framework and asset pipeline for Ethereum.

With Truffle, you get:

* Built-in smart contract compilation, linking, deployment and binary management.
* Automated contract testing with Mocha and Chai.
* Configurable build pipeline with support for custom build processes.
* Scriptable deployment & migrations framework.
* Network management for deploying to many public & private networks.
* Interactive console for direct contract communication.
* Instant rebuilding of assets during development.
* External script runner that executes scripts within a Truffle environment.

Here are some links to get you started:

* Documentation: http://truffleframework.com/docs
* Github link: https://github.com/trufflesuite/truffle
* Website link: https://truffleframework.com

[[embark_sec]]
==== Embark
The Embark Framework focuses on serverless Decentralized Applications using Ethereum, IPFS and other platforms. Embark currently integrates with all EVM-based blockchains (of which Ethereum is the most prominent, of course), decentralized storages services (including IPFS), and decentralized communication platforms (including Whisper and Orbit).

With Embark you can:

** Blockchain (Ethereum)
* Automatically deploy contracts and make them available in your JS code. Embark watches for changes, and if you update a contract, Embark will automatically redeploy the contracts (if needed) and the DApp.
* Contracts are available in JS with Promises.
* Do Test Driven Development with Contracts using Javascript.
* Keep track of deployed contracts; deploy only when truly needed.
* Manage different chains (e.g testnet, private net, livenet)
* Easily manage complex systems of interdependent contracts.

** Decentralized storage (IPFS)
* Easily store & retrieve data on the DApp through EmbarkJS, including uploading and retrieving files.
* Deploy the full application to IPFS or Swarm.


** Decentralized Communication (Whisper, Orbit)
* Easily send/receive messages through channels in P2P through Whisper or Orbit.

** Web Technologies
* Integrate with any web technology including React, Foundation, etc.
* Use any build pipeline or tool you wish, including grunt, gulp and webpack.


Getting started & documentation; https://embark.readthedocs.io

Github link; https://github.com/embark-framework/embark

Website link; https://github.com/embark-framework/embark

==== Emerald

Emerald Platform is a framework and set of tools to simplify development of a Dapps and integration of existing services with Ethereum based blockchain.

Emerald provides:

* Javascript library and React components to build a Dapp
* SVG icons common for blockchain projects
* Rust library to manage private keys, including hardware wallets, and sign transactions
* Ready to use components/services that can be integrated into existing app thought command line or JSON RPC API
* Accompanied with SputnikVM, a standalone EVM implementation that can be used for development and testing

It's platform agnostic and provides tools for various targets:

* Desktop app bundled with Electron
* Mobile apps
* Web apps
* Command line apps and scripting tools

Getting started & documentation; https://docs.etcdevteam.com

Github link; https://github.com/etcdevteam/emerald-platform

Website link; https://emeraldplatform.io



[[dapp_development_tool_sec]]
==== DApp (development tool)
DApp is a simple command line tool for smart contract development. It supports these common use cases:


* Easily use any version of the C++ Solidity compiler
* Run unit tests and interactively debug contracts in a native EVM execution environment
* Create persistent testnets using the Go Ethereum client
* Easily deploy your dapp to any EVM blockchain

It was created in the spirit of the Unix design philosophy, which means it's a good citizen of the command-line and can be easily composed with other tools. To get started, visit https://dapp.tools/dapp



////
TODO: add paragraph
////

[[live_dapps_sec]]
=== Live DApps

Here are listed different live DApps on the Ethereum network:

////
TODO: add paragraph
////

[[populous_sec]]
==== Populous
An Ethereum based blockchain project aiming to disrupt the multi-million dollar invoice financing industry by creating a peer-to-peer blockchain based lending service.

Website link; https://populous.co/

[[ethpm_sec]]
==== EthPM
A project aimed at bringing package management to the Ethereum ecosystem.

Website link; https://www.ethpm.com/

[[radar_relay_sec]]
==== Radar Relay
DEX (Decentralized Exchange) focused on trading Ethereum tokens directly from wallet to wallet.

Website link; https://radarrelay.com/

[[cryptokitties_sec]]
==== CryptoKitties
A game deployed on Ethereum that allows players to purchase, collect, breed and sell various types of virtual cats
It represents one of the earliest attempts to deploy blockchain technology for recreational and leisurely purposes.

Website link; https://www.cryptokitties.co

[[ethlance_sec]]
==== Ethlance
Ethlance is a platform for connecting freelancers and developers, both paying and receiving ether.

Website link; https://ethlance.com/

[[decentraland_sec]]
==== Decentraland
Decentraland is a virtual reality platform powered by the Ethereum blockchain. Users can create, experience, and monetize content and applications.

Website link; https://decentraland.org/

[[makerdao_sec]]
==== MakerDAO

One of Ethereum's oldest projects, MakerDAO creates the Dai stablecoin: an asset-backed hard currency for the 21st century. A stablecoin is a cryptocurrency that has low volatility against the world’s most important national currencies, potentially unlocking large benefits for the entire Internet.

The MakerDAO system allows users to lock up their valuable Ethereum tokens as collateral and issue Dai against them. When they want to retrieve their assets later, they simply return the Dai they issued plus a fee based on how long it was outstanding. This simple principle means that each Dai is backed by some valuable asset held in the secure MakerDAO smart contract platform.

Dai has been operational since December 2017. For a much more detailed description of the system, visit https://makerdao.com

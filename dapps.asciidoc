[[decentralized_applications_chap]]
== Decentralized Applications (DApps)

In this section we will explore the world of _Decentralized Applications_ or _DApps_. From the early days of Ethereum, the founders' vision was much broader than "smart contracts": no less than reinventing the web and creating a new world of DApps, aptly called _web3_. Smart contracts are a way to decentralize the controlling logic (and payment functions) of applications. Web3 DApps are about decentralizing all other aspects of an application: storage, messaging, naming etc.

While decentralized apps describe an audacious vision of the future, the term DApp is often applied to projects that fall short of that vision. In fact, any smart contract with a web front end is called a DApp. Some of these are highly centralized applications (CApps?) in every way, yet they get called "DApps" anyway. Beware of false DApps!

In this section, we will also develop and deploy a decentralized auction platform, as an example DApp. You can find the source code for that in the book's repository under +code/auction_dapp+. We will look at each apsect of an auction application and see how we can decentralize the application as much as possible.

[[what_is_a_dapp_sec]]
=== What is a DApp?

A Decentralized Application, or _DApp_, is an application which is mostly or entirely decentralized.

Consider all the possible aspects of an application that may be decentralized:

* Front-end software
* Back-end software (logic)
* Data storage
* Name resolution
* Message communications

Each of these can be somewhat centralized or somewhat decentralized. For example, a front-end can be developed as a proprietary application, or as an open web application. The back-end and storage can be on private servers and proprietary databases, or a smart contract and P2P storage.

There are many advantages to creating a DApp that a typical centralized architecture can not provide:

1) Resiliency: by having the business-logic controlled by a smart contract, a DApp back-end will be fully distributed and managed on a blockchain platform. Unlike deploying an application on a centralized server, a DApp will have no downtime and will continue to persist as long as the platform is still operating.

2) Transparency: the on-chain nature of a DApp allows everyone to inspect the code and be more sure about its function. On the same note, any interaction with the the DApp will be stored forever in the blockchain.

3) Censorship Resistance: as long as a user has access to an Ethereum node (running one if necessary), the user will always be able to interact with a DApp without interference from any centralized control. No service provider, or even the owner of the smart contract, could alter the code once it is deployed on the network.

In the Ethereum ecosystem as it stands today, there are very few trully decentralized apps - most still rely on centralized service and servers for some part of their operation. In the future, we expect that it will be possible for every part of any DApp to be operated in a fully decentralized way.

[[blockchain_smart_contracts_sec]]
==== Smart contracts "back end"

In a DApp, smart contracts are used to store the business logic (program code) and the related state of your application. You can think of a smart contract replacing  a server-side (a.k.a. "back end") component in a regular application. This is an oversimplification, of course. One of the main differences is that any computation executed in a smart contract is very expensive and so should be kept as minimal as possible. It is therefore important to identify which aspects of the application need a trusted and decentralized execution platform.

Ethereum smart contracts allow you to build almost arbitrarily complex architectures in which a network of smart contracts call and pass data between each other, reading and writing their own state variables as they go. We have to add "almost" in our description, because the amount of computation that can be done in one transaction will always be limited to some degree, as specified by the block gas limit. After deploying your smart contract, your business logic could well be used by many other developers in the future.

One major consideration of smart contract architecture design is the inability to change the code of a smart contract once it is deployed. It can be deleted if it is programmed with an accessible +SELFDESTRUCT+ opcode, but other than complete removal, the code cannot be changed in any way.

The second major consideration of smart contract architecture design is DApp size; a really large monolithic smart contract may cost a lot of gas to deploy and use. Therefore, some applications may choose to have off chain computation and an external data source. Keep in mind, however, that having the core business logic of the DApp be dependent on external data (e.g. from a centralized server) would mean your users will have to trust these external resources.

[[front_end_web_ui_cec]]
==== Front end (Web User Interface)

Unlike the business logic of the DApp that requires a developer to understand the EVM and new languages such as Solidity, the client side interface of a DApp can use basic web technologies (HTML, CSS, JavaScript, etc). This allows a traditional web developer to utilize the tools, libraries and frameworks they are familiar with using on a regular basis. Interactions with Ethereum, such as signing messages, sending transactions and key management are often conducted through the web browser, via an extension such as MetaMask.

Although it is possible to create a mobile DApp as well, currently there are few resources to help create mobile DApp front-ends, mainly due to the lack of mobile clients that can serve as a light client with key management functionality.

The front-end is usually linked to Ethereum via the web3.js Javascript library, which is bundled with the front-end resources and served to a browser by a web server.

[[data_storage_sec]]
==== Data storage

Due to high gas costs and the currently low block gas limit, smart contracts are not suited to store or process large amounts of data. Hence, most DApps will utilize off-chain data storage services, meaning they store the bulky data off the Ethereum chain, on a data storage platform. That data storage platform can be centralized, such as a database and web server hosted by a company. Or, the data can be decentralized, stored on a P2P platform such as the _Interplanetary File System (IPFS)_, or Ethereum's own _Swarm_ platform.

Decentralized P2P storage is ideal for storing and distributing large static assets such as images, videos, and the resources of the application's front-end web interface (HTML, CSS, JavaScript, etc).

[[ipfs_sec]]
===== IPFS

////
TODO: add paragraph
////

[[swarm_sec]]
===== Swarm

Swarm is a decentralized data disemination protocol. Here are pointers to resources where you can find out more:

* Swarm home page: http://swarm-gateways.net/bzz:/theswarm.eth/
* Read the docs: https://swarm-guide.readthedocs.io/en/latest/index.html
* Swarm developer's onboarding guide: https://github.com/ethersphere/swarm/wiki/swarm
* The swarm engine room: https://gitter.im/ethersphere/orange-lounge
* Similarities/differences between Ethereum's Swarm and IPFS: https://github.com/ethersphere/go-ethereum/wiki/IPFS-&-SWARM

[[interdapp_coammunications_protocol_sec]]
==== Inter-DApp communications protocol



[[whisper_sec]]
===== Whisper

////
TODO: add paragraph
////
https://github.com/ethereum/wiki/wiki/Whisper

https://github.com/ethereum/wiki/wiki/Whisper-Overview




[[dapp_frameworks_sec]]
=== DApp frameworks

There are many different Development frameworks and libraries written in many languages which allows for a better developer experience in creating and deploying a DApp.

[[truffle_sec]]
==== Truffle
Truffle is a DApp development environment. It is a popular choice and provides an application management environment, testing framework and asset pipeline for Ethereum.

With Truffle, you get:

* Built-in smart contract compilation, linking, deployment and binary management.
* Automated contract testing with Mocha and Chai.
* Configurable build pipeline with support for custom build processes.
* Scriptable deployment & migrations framework.
* Network management for deploying to many public & private networks.
* Interactive console for direct contract communication.
* Instant rebuilding of assets during development.
* External script runner that executes scripts within a Truffle environment.

Here are some links to get you started:

* Documentation: http://truffleframework.com/docs
* Github link: https://github.com/trufflesuite/truffle
* Website link: https://truffleframework.com

[[embark_sec]]
==== Embark
The Embark Framework focuses on serverless Decentralized Applications using Ethereum, IPFS and other platforms. Embark currently integrates with all EVM-based blockchains (of which Ethereum is the most prominent, of course), decentralized storages services (including IPFS), and decentralized communication platforms (including Whisper and Orbit).

With Embark you can:

** Blockchain (Ethereum)
* Automatically deploy contracts and make them available in your JS code. Embark watches for changes, and if you update a contract, Embark will automatically redeploy the contracts (if needed) and the DApp.
* Contracts are available in JS with Promises.
* Do Test Driven Development with Contracts using Javascript.
* Keep track of deployed contracts; deploy only when truly needed.
* Manage different chains (e.g testnet, private net, livenet)
* Easily manage complex systems of interdependent contracts.

** Decentralized storage (IPFS)
* Easily store & retrieve data on the DApp through EmbarkJS, including uploading and retrieving files.
* Deploy the full application to IPFS or Swarm.


** Decentralized Communication (Whisper, Orbit)
* Easily send/receive messages through channels in P2P through Whisper or Orbit.

** Web Technologies
* Integrate with any web technology including React, Foundation, etc.
* Use any build pipeline or tool you wish, including grunt, gulp and webpack.


Getting started & documentation; https://embark.readthedocs.io

Github link; https://github.com/embark-framework/embark

Website link; https://github.com/embark-framework/embark

==== Emerald

Emerald Platform is a framework and set of tools to simplify development of a Dapps and integration of existing services with Ethereum based blockchain.

Emerald provides:

* Javascript library and React components to build a Dapp
* SVG icons common for blockchain projects
* Rust library to manage private keys, including hardware wallets, and sign transactions
* Ready to use components/services that can be integrated into existing app thought command line or JSON RPC API
* Accompanied with SputnikVM, a standalone EVM implementation that can be used for development and testing

It's platform agnostic and provides tools for various targets:

* Desktop app bundled with Electron
* Mobile apps
* Web apps
* Command line apps and scripting tools

Getting started & documentation; https://docs.etcdevteam.com

Github link; https://github.com/etcdevteam/emerald-platform

Website link; https://emeraldplatform.io



[[dapp_development_tool_sec]]
==== DApp (development tool)
DApp is a simple command line tool for smart contract development. It supports these common usecases:


* Easily use any version of the C++ Solidity compiler
* Run unit tests and interactively debug contracts in a native EVM execution environment
* Create persistent testnets using the Go Ethereum client
* Easily deploy your dapp to any EVM blockchain

It was created in the spirit of the Unix design philosophy, which means it's a good citizen of the command-line and can be easily composed with other tools. To get started, visit https://dapp.tools/dapp



////
TODO: add paragraph
////

[[live_dapps_sec]]
=== Live DApps

Here are listed different live DApps on the Ethereum network:

////
TODO: add paragraph
////

[[populous_sec]]
==== Populous
An Ethereum based blockchain project aiming to disrupt the multi-million dollar invoice financing industry by creating a peer-to-peer blockchain based lending service.

Website link; https://populous.co/

[[ethpm_sec]]
==== EthPM
A project aimed at bringing package management to the Ethereum ecosystem.

Website link; https://www.ethpm.com/

[[radar_relay_sec]]
==== Radar Relay
DEX (Decentralized Exchange) focused on trading Ethereum tokens directly from wallet to wallet.

Website link; https://radarrelay.com/

[[cryptokitties_sec]]
==== CryptoKitties
A game deployed on Ethereum that allows players to purchase, collect, breed and sell various types of virtual cats
It represents one of the earliest attempts to deploy blockchain technology for recreational and leisurely purposes.

Website link; https://www.cryptokitties.co

[[ethlance_sec]]
==== Ethlance
Ethlance is a platform for connecting freelancers and developers, both paying and receiving ether.

Website link; https://ethlance.com/

[[decentraland_sec]]
==== Decentraland
Decentraland is a virtual reality platform powered by the Ethereum blockchain. Users can create, experience, and monetize content and applications.

Website link; https://decentraland.org/

[[makerdao_sec]]
==== MakerDAO

One of Ethereum's oldest projects, MakerDAO creates the Dai stablecoin: an asset-backed hard currency for the 21st century. A stablecoin is a cryptocurrency that has low volatility against the world’s most important national currencies, potentially unlocking large benefits for the entire Internet.

The MakerDAO system allows users to lock up their valuable Ethereum tokens as collateral and issue Dai against them. When they want to retrieve their assets later, they simply return the Dai they issued plus a fee based on how long it was outstanding. This simple principle means that each Dai is backed by some valuable asset held in the secure MakerDAO smart contract platform.

Dai has been operational since December 2017. For a much more detailed description of the system, visit https://makerdao.com

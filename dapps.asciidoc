[[decentralized_applications_chap]]
== Decentralized Applications (DApps)

////
TODO: add paragraph
////

[[what_is_a_dapp_sec]]
=== What is a DApp?

Unlike a traditional application, a Decentralized Application (DApp) does not belong only to one single provider or server, but the whole stack would be deployed and operated in a distributed fashion on a peer-to-peer network.

A typical DApp stack would consist of Front-end, Back-end and Data Storage. There are many advantages to creating a DApp that a typical centralized architecture could not provide:

1) Resiliency: Having the business-logic written on a smart contract means that a DApp backend will be fully distributed and managed on the Blockchain. Unlike deploying an application on a centralized server, a DApp will have no downtime and will continue to persist as long as the Blockchain is still operating.

2) Transparency: The open source nature of a DApp allows anyone to fork the code and have the same application running on the Blockchain. On the same note, any interaction with the Blockchain will be stored forever and anyone with a copy of the Blockchain can gain access to it. Itâ€™s worth noting that it may not be possible to de-compile the bytecodes into source and fully understand the contract's code. Developers who seek to offer full transparency about the contract behavior must publish the source code for users to read, compile and verify.

3) Censorship Resistance: As long as a user has access to an Ethereum node, the user will always be able to interact with a DApp without interference from a centralized control. No service provider, or even the owner of the smart contract, could alter the code once it is deployed on the network.

[[components_of_a_dapp_sec]]
=== Components of a DApp

////
TODO: add paragraph
////

[[blockchain_smart_contracts_sec]]
==== Blockchain (Smart Contracts)

The smart contract is used to store the business logic, the state and the computation of your decentralized application; think of a smart contract as a server-side component in a regular application.

One advantage of deploying server-side logic on Ethereum smart contracts is that you could build a more complex architecture in which a smart contract could read and write data off one another. After deploying your smart contract, your business logic could well be used by many other developers in the future, without ever requiring you to manage and maintain the code.

One major problem of running smart contract as core business logic functionality is the inability to change the code once it is deployed. Furthermore a really large monolithic smart contract may cost a lot of gas to deploy and function. Therefore some applications may choose to have off chain computation and external data source. Keep in mind however, that having core business logic of the DApp be dependent on external data or server would mean your users will have to trust these externalities.

[[front_end_web_ui_cec]]
==== Front end (Web User Interface (UI))

Unlike the business logic of the DApp that requires a developer to understand EVM and new languages such as Solidity, the client side interface of a DApp uses basic web front end technologies (HTML, CSS, JavaScript). This allows a traditional web developer to utilize the tools, libraries and frameworks they are familiar with using on a regular basis. Interactions with the DApp such as signing messages, sending transactions and key management are often conducted through the browser itself using tools such as Mist browser or the Metamask browser extension.

Although it is possible to create a mobile DApp as well, currently there are no best practices to create mobile DApp front-ends due to the lack of mobile clients that can serve as a light client with key management functionality.

[[data_storage_sec]]
==== Data storage

Due to high gas costs, smart contracts are currently not suited to store large amounts of data. Hence, most DApps will utilize decentralized storages such as IPFS or Swarm for storing and distributing large static assets such as images, videos, and client side application (HTML, CSS, JavaScript).

The hashes of the content are often stored as bytes within the smart contract, using key value mapping. The asset would then be retrieved through your front end applications calling on the smart contract for urls of each asset.

[[on_chain_vs_off_chain_data_sec]]
===== On chain vs. off chain

////
TODO: add paragraph
////

[[ipfs_sec]]
===== IPFS

////
TODO: add paragraph
////

[[swarm_sec]]
===== Swarm

Swarm home page; http://swarm-gateways.net/bzz:/theswarm.eth/

Read the docs; https://swarm-guide.readthedocs.io/en/latest/index.html

Swarm developer's onboarding guide; https://github.com/ethersphere/swarm/wiki/swarm

The swarm engine room; https://gitter.im/ethersphere/orange-lounge

Similarities/differences between Ethereum's Swarm and IPFS; https://github.com/ethersphere/go-ethereum/wiki/IPFS-&-SWARM

[[centralized_db_sec]]
===== Centralized db

////
TODO: add paragraph
////

[[oracle_sec]]
===== Oracle

////
TODO: add paragraph
////

[[interdapp_coammunications_protocol_sec]]
==== Inter-DApp communications protocol

////
TODO: add paragraph
////

[[whisper_sec]]
===== Whisper

////
TODO: add paragraph
////
https://github.com/ethereum/wiki/wiki/Whisper

https://github.com/ethereum/wiki/wiki/Whisper-Overview

[[dapp_frameworks_sec]]
=== DApp frameworks

There are many different Development frameworks and libraries written in many languages which allows for better developer experience in creating and deploying a DApp.

[[truffle_sec]]
==== Truffle
Truffle is a popular choice and provides a manageable development environment, testing framework and asset pipeline for Ethereum.

With Truffle, you get:

* Built-in smart contract compilation, linking, deployment and binary management.
* Automated contract testing with Mocha and Chai.
* Configurable build pipeline with support for custom build processes.
* Scriptable deployment & migrations framework.
* Network management for deploying to many public & private networks.
* Interactive console for direct contract communication.
* Instant rebuilding of assets during development.
* External script runner that executes scripts within a Truffle environment.

Getting started & documentation; http://truffleframework.com/docs

Github link; https://github.com/trufflesuite/truffle

Website link; https://truffleframework.com

[[embark_sec]]
==== Embark
The Embark Framework focuses on serverless Decentralized Applications using Ethereum, IPFS and other platforms. Embark currently integrates with EVM blockchains (Ethereum), Decentralized Storages (IPFS), and Decentralized communication platforms (Whisper and Orbit).

With Embark you can:

** Blockchain (Ethereum)
* Automatically deploy contracts and make them available in your JS code. Embark watches for changes, and if you update a contract, Embark will automatically redeploy the contracts (if needed) and the DApp.
* Contracts are available in JS with Promises.
* Do Test Driven Development with Contracts using Javascript.
* Keep track of deployed contracts; deploy only when truly needed.
* Manage different chains (e.g testnet, private net, livenet)
* Easily manage complex systems of interdependent contracts.

** Decentralized storage (IPFS)
* Easily store & retrieve data on the DApp through EmbarkJS, including uploading and retrieving files.
* Deploy the full application to IPFS or Swarm.


** Decentralized Communication (Whisper, Orbit)
* Easily send/receive messages through channels in P2P through Whisper or Orbit.

** Web Technologies
* Integrate with any web technology including React, Foundation, etc.
* Use any build pipeline or tool you wish, including grunt, gulp and webpack.

Getting started & documentation; https://embark.readthedocs.io

Github link; https://github.com/embark-framework/embark

Website link; https://github.com/embark-framework/embark

[[dapp_development_tool_sec]]
==== Dapp (development tool)
Dapp is all you need to start developing for Ethereum. These are some of its key features:

* Easily use any version of the C++ Solidity compiler
* Run unit tests and interactively debug contracts in a native EVM execution environment
* Create persistent testnets using the Go Ethereum client
* Easily deploy your dapp to any EVM blockchain

It was created in the spirit of the Unix design philosophy, which means it's a good citizen of the command-line and can be easily composed with other tools. To get started, visit https://dapp.tools/dapp


[[populous_sec]]
==== Populous

////
TODO: add paragraph
////

[[live_dapps_sec]]
=== Live DApps

Here are listed different live DApps on the Ethereum network:

////
TODO: add paragraph
////

[[ethpm_sec]]
==== EthPM
A project aimed at bringing package management to the Ethereum ecosystem.

Website link; https://www.ethpm.com/

[[radar_relay_sec]]
==== Radar Relay
DEX (Decentralized Exchange) focused on trading ethereum-tokens directly from wallet to wallet.

Website link; https://radarrelay.com/

[[cryptokitties_sec]]
==== CryptoKitties
A game deployed on Ethereum that allows players to purchase, collect, breed and sell various types of virtual cats
It represents one of the earliest attempts to deploy blockchain technology for recreational and leisurely purposes.

Website link; https://www.cryptokitties.co

[[ethlance_sec]]
==== Ethlance
Ethlance is a platform for connecting freelancers and developers, both paying and receiving ether.

Website link; https://ethlance.com/

[[decentraland_sec]]
==== Decentraland
Decentraland is a virtual reality platform powered by the Ethereum blockchain. Users can create, experience, and monetize content and applications.

Website link; https://decentraland.org/

[[makerdao_sec]]
==== MakerDAO

One of Ethereum's oldest projects, MakerDAO creates the Dai stablecoin: an asset-backed hard currency for the 21st century. A stablecoin is a cryptocurrency that has low volatility against the worldâ€™s most important national currencies, potentially unlocking large benefits for the entire Internet.

The MakerDAO system allows users to lock up their valuable Ethereum tokens as collateral and issue Dai against them. When they want to retrieve their assets later, they simply return the Dai they issued plus a fee based on how long it was outstanding. This simple principle means that each Dai is backed by some valuable asset held in the secure MakerDAO smart contract platform.

Dai has been operational since December 2017. For a much more detailed description of the system, visit https://makerdao.com


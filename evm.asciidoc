== Ethereum Virtual Machine

=== What is it?

==== Compare to

* Virtual Machine (Virtualbox, QEMU, cloud computing)

* Java VM

Virtual Machine technologies such as Virtualbox and QEMU/KVM differ from the EVM in that their purpose is to provide hypervisor functionality, or a software abstraction that handles system calls, task scheduling, and resource management between a guest OS and the underlying host OS and hardware.

Certain aspects of the Java VM (JVM) specification however, do contain similarities to the EVM. From a high-level overview, the JVM is designed to provide a runtime environment that is irrespective of the underlying host OS or hardware, enabling compatibility across a wide variety of systems. High level program languages such as Java or Scala that run on the JVM are compiled into the respective instruction set bytecode. This is comparable to compiling a Solidity source file to run on the EVM.

==== EVM Machine Language (Bytecode Operations)

The EVM Machine Language is divided into specific instruction set groups, such as arithmetic operations, logical and comparison operations, control flow, system calls, stack operations, and memory operations. In addition to the typical bytecode operations, the EVM must also manage account information (i.e. address and balance), current gas price, and block information.

Common Stack Operations:: Opcode instructions for stack and memory management:

----
POP     //Pop item off the stack
PUSH    //Push item on the stack
MLOAD   //Load item into memory
MSTORE  //Store item in memory
JUMP    //Alter the location of program counter (PC)
PC      //Program counter
MSIZE   //Active memory size
GAS     //Amount of available gas for transaction
DUP     //Stack item duplication
SWAP    //Stack item exchange operation
----

Common System Operations:: Opcode instructions for the system executing the program:

----
CREATE  //Create a new account 
CALL    //Instruction for message passing between accounts
RETURN  //Execution halt
REVERT  //Execution halt, reverting state changes
SELFDESTRUCT //Execution halt, and flag account for deletion
----

Arithmetic Operations:: Common arithmetic opcode instructions:

----
ADD      //Add 
MUL      //Multiplication
SUB      //Subtraction
DIV      //Integer division
SDIV     //Signed integer division
MOD      //Modulo (Remainder) operation
SMOD     //Signed modulo operation
ADDMOD   //Modulo addition
MULMOD   //Modulo multiplication
EXP      //Exponent operation
STOP     //Halt operation
----

==== State

As with any computing system, the concept of state is an important one. Just like a CPU keeping track of a process in execution, the EVM must keep track of the status of various components in order to support a transaction. The status or _state_ of these components ultimately drives the level of change in the overarching blockchain. This aspect leads to the description of Ethereum as a _transaction-based state machine_ containing the following components:

World State:: A mapping between 160-bit address identifiers and account state, maintained in an immutable _Merkle Patricia Tree_ data structure.

Account State:: Contains the following four components:

* _nonce_: A value representing either the number of transactions sent or the number of contracts created from this respective account.

* _balance_: The number of _Wei_ owned by the account address.

* _storageRoot_: A 256-bit hash of the Merkle Patricia Tree's root node.

* _codeHash:_: An immutable hash value of the EVM code for the respective account.

Storage State:: Account specific state information maintained at runtime on the EVM.

Block Information:: The state values needed for a transaction include the following:

* _blockhash_: The hash of the most recently completed blocks.

* _coinbase_: The address of the recipient.

* _timestamp_: The current block's timestamp.

* _number_: The current block's number.

* _difficulty_: The current block's difficulty.

* _gaslimit_: The current block's gas-limit.

Runtime Environment Information: Information used to facilitate transactions.

* _gasprice_: Current gas price, which is specified by the transaction initiator.

* _codesize_: Size of the transaction codebase.

* _caller_: Address of the account executing the current transaction.

* _origin_: Address of the current transactions original sender.



State transitions are calculated with the following functions:

Ethereum State Transition Function:: Used to calculate a _valid state transition_.

Block Finalization State Transition Function:: Used to determine the state of a finalized block as part of the mining process, including block reward.

Block Level State Transition Function:: The resulting state of the Block Finalization State Transition Function when applied to a transaction state.


==== Compiling Solidity to EVM bytecode

Compiling a Solidity source file to EVM bytecode can be accomplished via the command line. For a list of additional compile options, simply run the following command:

----
$ solc --help
----

Generating the raw opcode of a Solidity source file is easily achieved with the _--opcodes_ command line option. For example, compiling an example Solidity file _Example.sol_ and populating the opcode output into a directory named _BytecodeDir_ is accomplished with the following command:

----
$ solc -o BytecodeOutputDir --opcodes Example.sol
----

The output opcode files generated will depend on the specific contracts contained within the Solidity source file. Our simple Solidity file _Example.sol_ has only one contract named "example".

----
pragma solidity ^0.4.19;

contract example {

  address contractOwner;

  function example() {
    contractOwner = msg.sender;
  }
}
----

If you look in the _BytecodeDir_ directory, you will see the opcode file _example.opcode_ which contains the EVM machine language instructions of the "example" contract. Opening up the _example.opcode_ file in a text editor will show the following:

----
PUSH1 0x60 PUSH1 0x40 MSTORE CALLVALUE ISZERO PUSH2 0xF JUMPI PUSH1 0x0 DUP1
/*snip*/
----

Let's examine the first two instructions:

----
PUSH1 0x60 PUSH1 0x40
----

Here we have the _mnemonic_ "PUSH1" with a _value_ of "0x60". This corresponds to the EVM instruction of pushing a 1-byte item onto the stack. This operation is capable of pushing a 32-byte item on the stack with the following opcode:

----
PUSH32 0x7f
----

The second push opcode value "0x40" indicates the hash value of a recent complete block.

Moving on to the next two instructions:

----
MSTORE CALLVALUE
----

MSTORE is a stack/memory operation that saves a value to memory, while CALLVALUE is an opcode that returns the deposited value of the executing transaction.


==== Execution of EVM bytecode

==== Gas, Accounting

For every transaction, there is an associated _gas-limit_ and _gas-price_ which make up the fees of an EVM execution. These fees are used to facilitate the necessary resources of a transaction, such as computation and memory. Gas is also used for the creation of accounts and smart-contracts.

==== Turing Completeness and Gas

== Gas

Because programs require computational "work" to perform an action or set of actions, there is a cost associated with calling on smart contracts and transacting on the Ethereum blockchain. This cost is related to the number of computational steps that the program undergoes. Unlike Bitcoin transaction fees which only takes into account the size of a transaction (kB), Ethereum smart contracts can perform an arbitrary number of computational steps. The higher the number of operations a program performs, the higher the cost to run it to completion. **Gas** is Ethereum's unit for measuring how much computational "work" an action or set of actions takes to perform. Every operation performed by a transaction or contract costs a certain number of gas.

To each operation, a fixed amount of gas is assigned some examples from the Ethereum yellow paper
* Adding two numbers costs 3 gas
* Calculating a Keccak256 hash costs 30 gas + 6 more gas for every 256 bits of data being hashed
* Sending a transaction costs 21000 gas

=== Paying for gas

Gas cannot be "owned" nor "spent". It exists only inside the Ethereum Virtual Machine (EVM) as a count of how much computational work is being performed. The sender is charged a transaction fee in ether, which is then converted to gas and then back to ether as block rewards for the miners. These conversion steps are in place to separate the price for the computation (tied to amount of "work") from the price of ether (tied to market fluctuations).

==== Who pays for gas?


////
TODO
////

=== Gas cost vs. gas price

While the **gas cost** is a measure of operational steps performed in the EVM, the gas itself also has a **gas price** measured in ether. When performing a transaction, the sender specifies the gas price they are willing to pay (in ether) for each unit of gas, allowing the market to decide the relationship between the price of ether and the cost of computing operations (as measured in gas).

`total gas used * gas price paid = transaction fee` in ether

This amount is deducted from the sender's account at the start of the transaction execution. Instead of "total gas used", the sender is to set a **gas limit** that should be sufficient to cover the amount of gas required to perform the transaction.

=== Gas limit and running out of gas

Before sending a transaction, senders must specify a **gas limit** - the maximum amount of gas they are willing to buy. They must also specify the **gas price** - the price in ether they are willing to pay for each unit of gas.

`gas limit * gas price` in ether is deducted from the sender's account at the start of transaction execution as a deposit. This is to prevent the sender from going "bankrupt" mid-execution and being unable to pay for gas costs. Senders are also unable to set a gas limit that exceeds their account balance for this reason.

If the gas used goes over the specified gas limit, i.e. if the transaction "runs of out gas" during execution, the operation is terminated. Although the transaction was unsuccessful, the sender would not get their transaction fee back as miners have already performed the computational work up to that point, and will be compensated for doing so.

If the sender specifies a gas limit that is higher than the gas used however, they will get the excess amount refunded back to them, as miners are only compensated for the work they actually perform.

In which case:

`(gas limit - excess gas) * gas price` ether goes to the miner as a block reward

`excess gas * gasprice` ether is refunded to the sender

=== Questions that need to be answered in this section

* x What is Gas
* x What is gas cost
* x What is the gas limit
* x How is gas counted
* x Who pays gas
* x What happens if there's not enough gas
* x Is gas paid if there's not enough?
* Who pays for contract calls if intiated by EOA
* Who pays if the contract initiates the message?
* How are contracts funded
* x Can you set the gas limit above the balance you have?
* x When is gas actually charged
* x Can you double spend gas? Why not?
* how are transactions sequenced when sent concurrently (same block), in terms of gas and balance?
* How can a contract run out of gas?

== Introduction

Let's build an end to end Application using truffle ,Angular JS 4 and finally complete with
test cases.

=== Use case 

We will create a smart Contract named `TransferToFriend` whereby:

1. There are 2 friends named John and Ram.
2. We can see balance of the person(lets say John) sending money to other(lets say Ram) in Web UI.
3. Web UI should be able to have fields like the amount to be sent and address of the receipient along with Send Button.


=== Environment Pre-Requisites

1. Install latest Node version.
2. Install Truffle .

Please refer to dev tools section for installation instructions

//TODO: Provide the link for dev tools section.

3. Install angular cli globally

----
$ npm install â€“g @angular/cli

+ @angular/cli@1.7.3
updated 9 packages in 51.889s
----


=== Deep Dive into Project


1. Create a folder named TransferToFriend.

----
$ mkdir TransferToFriend
$ cd TransferToFriend
----

2. Intiate a truffle project and verify it contents.

----
$ truffle init

Downloading...
Unpacking...
Setting up...
Unbox successful. Sweet!

Commands:

  Compile:        truffle compile
  Migrate:        truffle migrate
  Test contracts: truffle test
----

3. Go to directory contracts and create a new file named `TransferToFriend.sol`.

----
$ cd contracts\
$ touch TransferToFriend.sol
----

4. Replace the below solidity code into `TransferToFriend.sol`.

----
pragma solidity ^0.4.17;

contract TransferToFriends {
  
 address public owner; 
 //This map stores address and friend details.
 mapping(address => uint) public amountFriendMap;
 
//Set the owner address while creating a contract.
  function TransferToFriends() public {
      owner = msg.sender;
  }

//This event get dispatched once the amount is transfered
  event LogSentAmount(address from, uint value, address friendAddress);
  //This event get dispatched once the amount is withdrwan
  event LogWithDrawal(address withdrawAddress,uint value);
  

  function sendAmount (address friendAddress)  public  payable {
      
      //Verify that amount sent and friendAddress are not blank.
      require(msg.value>0 && friendAddress!=address(0));
      
      //Add the amount and friendAddress to map.
      amountFriendMap[friendAddress] += msg.value;
    
    //Send a log event 
     LogSentAmount(msg.sender, msg.value, friendAddress);
          
  }
//Withraw Pull pattern
  function withdraw() public {
      //Check if the amount is present and greater than zero for the address who intiated this function.
    require(amountFriendMap[msg.sender]>0);
    
    uint amount = amountFriendMap[msg.sender];

    //Change state of contract before tranfser
    amountFriendMap[msg.sender] = 0;
    
    //Send the amount
    msg.sender.transfer(amount);
    
    //Emit event
    LogWithDrawal(msg.sender,amount);

  }

}

----












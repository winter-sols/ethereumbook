[Vyper]

Vyper is an experimental, contract-oriented programming language which targets the Ethereum Virtual Machine (EVM). Vyper strives to simplify the human readable code and in doing so provide superior auditability. One of the principles and goals of Vyper is to make it near impossible (very difficult) for developers, who use Vyper, to write misleading code. This is done in a number of ways, which we will describe below.

== The difference between Solidity and Vyper

=== Compiler

Solidity compiler C++
Vyper compiler Python

=== Syntax
Syntax is simplified in Vyper. For example in Solidity value can be transferred using two different functions a) receiver.transfer and b) receiver.send whereas in Vyper there is only one way to transfer value. By using the send(receiver, amount) function.

Variable typecasting has also been simplified in Vyper TODO provide example

pre-conditions as well as post-conditions and state changes are handled explicitly, Whilst this does produce redundant code it allows for maximal readability, auditability and less confusion. The process of writing a function should include the following three steps (in this order)
1) Condition - What is the current state/condition of the state variables
2) Effects - What effects will the following code have on the state variables once executed
3) Interaction - The actual execution of logic now that the first two steps have been exhaustively dealt with

Anti class inheritance - TODO explain more

Anti operator overloading - TODO also explain more

Fixed loops vs Solidity's dynamic loops

Global variables - TODO also explain more

Constructors - TODO also explain more

Decorators - Decorators like @public @constant @payable are declared at the start of each function.

Public decorator - The public decorator makes the function both visible and executable publicly. For example the Ethereum wallet will even display the public functions when viewing the contract.

Constant decorator - Functions which start with the constant decorator are not allowed to change state variables, as part of their execution. If fact the compiler will reject the entire program (with an appropriate warning) if the function tries to change a state variable. If the function is meant to change a state variable then the constant decorator is not used at the start of the function.

Payable decorator - Only functions which declare the @payable decorator at the start will be allowed to transfer value.

Vyper implements the logic of decorators explicitly. For example the Vyper code compilation process will fail if a function is preceeded with both a payable decorator and a constant decorator. Of course this makes sense because a constant function (one which only reads from the global state) should never need to partake in a transfer of value.

=== Online code editor and compiler
Vyper has its own online code editor and compiler at the following URL < https://vyper.online >. This Vyper online compiler allows you to write and then compile your smart contracts into Bytecode, ABI and LLL using only your web browser. The Vyper online compiler has a variety of pre written smart contracts for your convenience. These include a simple open auction, safe remote purchases, ERC20 token and more.

=== Compiling using the command line
Each Vyper contract is saved in a single file with the .v.py extension. 
Once installed Vyper can compile and provide bytecode by running the following command

vyper ~/hello_world.v.py 

The human readable ABI code (in JSON format) can be obtained by then running the following command

vyper -f json ~/hello_world.v.py

=== Reading and writing data
Ethereum smart contracts can write data to two places. Ethereum's global state trie or Ethereum's chain data. While it is costly to store, read and modify data, these storage operations are a necessary component of most smart contracts. 

==== Global state
The state variables in a given Ethereum smart contract are stored in Ethereum's global state trie. A given smart contract can only store, read and modify data specifically in relation to that contract's address (i.e. smart contracts can not read or write to other smart contracts). TODO continue with more information about this in relation to Vyper

==== Log
As previously mentioned, a smart contract can also write to Ethereum's chain data through log events. While Vyper initially employed the pass:[__]logpass:[__] syntax for declaring these events, an update has been made which brings Vyper's event declaration more in line with Solidity's original syntax. For example, Vyper's declaration of an event called MyLog was originally MyLog: pass:[__]logpass:[__]({arg1: indexed(bytes <= 3)}) Vyper's syntax has now become MyLog: event({arg1: indexed(bytes <= 3)}). It is important to note that the execution of the log event in Vyper was and still is as follows log.MyLog("123").

While smart contracts can write to the Ethereum's chain data (through log events), smart contracts are unable to read the on-chain log events, which they created. Notwithstanding, one of the advantages of writing to Ethereum's chain data via log events is that logs can be discovered and read, on the public chain, by light clients. For example, the logsBloom value in a mined block can indicate whether or not a log event was present. Once this has been established the log data can be obtained through the path of logs -> data inside a given transaction receipt.

=== ERC20 Token Interface Implementation
The name, symbol, total supply and decimals variables of ERC20 tokens are publicly available using Vyper. TODO compare and contrast the differences between Solidity's ERC20 Token Interface Implementation (then expand out to other token EIPs)


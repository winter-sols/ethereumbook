////
Source:
https://github.com/ethereum/devp2p/blob/master/rlpx.md#node-discovery
https://github.com/ethereum/wiki/wiki/%C3%90%CE%9EVp2p-Wire-Protocol
https://github.com/ethereum/wiki/wiki/Ethereum-Wire-Protocol
https://github.com/ethereum/wiki/wiki/Adaptive-Message-IDs
License: Not defined yet
Added By: @fjrojasgarcia
////

== Communications between nodes - A simplified vision

Ethereum nodes communicate among themselves using a simple wire protocol forming a virtual or overlay well-formed network.
To achieve this goal, this protocol called ÐΞVp2p, uses technologies and standards such as RLP.

=== Transport protocol
In order to provide confidentiality and protect against network disruption, ÐΞVp2p nodes use RLPx messages, an encrypted and authenticated transport protocol.
RLPx utilizes Kademlia-like routing, a DHT (distributed hash table) for decentralized peer-to-peer computer networks.

RLPx, as an underlying transport protocol, allows among other, "Node Discovery and Network Formation".
Another remarkable feature of RLPx is the support of multiple protocols over a single connection.

When ÐΞVp2p nodes communicate via Internet (as they usually do), they use TCP, which provides a connection-oriented medium, but actually ÐΞVp2p nodes communicate in terms of packets, using the so-called facilities (or messages) provided by the underlying transport protocol RLPx, allowing them to communicate sending and receiving packets.

Packets are dynamically framed, prefixed with an RLP encoded header, encrypted and authenticated. Multiplexing is achieved via the frame header which specifies the destination protocol of a packet.

==== Encrypted Handshake
Connections are established via a handshake and, once established, packets are encrypted and encapsulated as frames.

This handshake will be carried out in two phases, the first phase is the keys exchange and the second phase will perform authentication, and as a part of DEVp2p, will also exchange the capabilities of each node.

==== Security - Basic considerations

All cryptographic operations are based on secp256k1 and each node is expected to maintain a static private key which is saved and restored between sessions.

Until encryption is implemented, packets have a timestamp property to reduce the window of time for carrying out replay attacks.
It's recommended that the receiver only accept packets created within the last 3 seconds

Packets are signed. Verification is performed by recovering the public key from the signature and checking that it matches an expected value.

=== ÐΞVp2p messages and Sub-protocols
With RLP we can encode different types of payloads, whose types are determined by the integer value used in the first entry of the RLP.
In this way, ÐΞVp2p, the basic wire protocol, support arbitrary sub-protocols.

Messages IDs between 0x00-0x10 are reserved for ÐΞVp2p messages, therefore sub-protocols messages-IDs are assumed to be from ID 0x10 onwards.

Sub-protocols that are not shared between peers are ignored.
If multiple versions of the same (equal name) sub-protocol are shared, the numerically highest wins.

==== Basic establishment of communication - Basic ÐΞVp2p message

As a very basic example, when two peers initiate their communication, each one greets the other with a special ÐΞVp2p message called *"Hello"*, identified by the _"0x00"_ message-id.
Through this particular ÐΞVp2p *"Hello"* message, each node will disclose to its peer relevant data that will allow the communication to begin at a very basic level.

In this step, each peer will know the following information about his peer.

- The implemented *version* of the P2P protocol.
- The client *software identity*, as a human-readable string (e.g. "Ethereum(++)/1.0.0").
- Peer *capability name* as a length-3 ASCII string. Current supported capabilities are eth, shh.
- Peer *capability version* as a positive integer.
- The *port* that the client is listening on.
- The *Unique Identity of the node* specified as a 512-bit hash.

==== Disconnection - Basic ÐΞVp2p message
To carry out an ordered disconnection, the node that wants to disconnect, will send a ÐΞVp2p message called *"Disconnect"*, identified by the _"0x01"_ message-id and specifying the reason for the disconnection using the parameter *"reason"*.

The *"reason"* param can take values from _"0x00"_ to _"0x10"_, e.g. "_0x00_: *Disconnect requested"* and "_0x04_: *Too many peers"*.

==== Status - Sub-protocol example

Ethereum (ÐΞVp2p) nodes communicate by sending capabilities or sub-protocols.

using RLPx, an encrypted and authenticated transport protocol.

==== NewBlockHashes - Another sub-protocol example

=== Node identity and reputation
The identity of a ÐΞVp2p node is a secp256k1 public key.
Clients are free to mark down new nodes and use the node ID as a means of determining a node's reputation.
They can store ratings for given IDs and give preference accordingly.

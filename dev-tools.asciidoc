= Development Tools, Frameworks and Libraries

== Frameworks

Frameworks can be used to ease development. By doing everything yourself you get a better understanding of how everything fits together, but it's a lot of tedious work and it's mostly doing the same over and over. These frameworks can automate some of these tasks and make development a breeze.

=== Truffle

=== Embark

=== Dapple (?)

== Utilities

=== ethereumJS testrpc: A rapid development test blockchain and RPC server

https://github.com/ethereumjs/testrpc


npm install -g ethereumjs-testrpc

-a or --accounts: Specify the number of accounts to generate at startup.
-b or --blocktime: Specify blocktime in seconds for automatic mining. Default is 0 and no auto-mining.
-d or --deterministic: Generate deterministic addresses based on a pre-defined mnemonic.
-n or --secure: Lock available accounts by default (good for third party transaction signing)
-m or --mnemonic: Use a specific HD wallet mnemonic to generate initial addresses.
-p or --port: Port number to listen on. Defaults to 8545.
-h or --hostname: Hostname to listen on. Defaults to Node's server.listen() default.
-s or --seed: Use arbitrary data to generate the HD wallet mnemonic to be used.
-g or --gasPrice: Use a custom Gas Price (defaults to 20000000000)
-l or --gasLimit: Use a custom Gas Limit (defaults to 0x47E7C4)
-f or --fork: Fork from another currently running Ethereum client at a given block. Input should be the HTTP location and port of the other client, e.g. http://localhost:8545. You can optionally specify the block to fork from using an @ sign: http://localhost:8545@1599200.
-i or --network-id: Specify the network id the TestRPC will use to identify itself (defaults to the current time or the network id of the forked blockchain if configured)
--db: Specify a path to a directory to save the chain database. If a database already exists, the TestRPC will initialize that chain instead of creating a new one.
--debug: Output VM opcodes for debugging
--mem: Output TestRPC memory usage statistics. This replaces normal output.

----
$ testrpc
EthereumJS TestRPC v4.1.1 (ganache-core: 1.1.2)

Available Accounts
==================
(0) 0x778ae5fa9d8c8a384a593363cef0becb2d070921
(1) 0x91f1dd068764ee3cbe85bd0d659aa72aafb34a15
(2) 0x393ac2db68f5f8316e4cb2be50795df10ff231d1
(3) 0x07e3d99a88442422dace37146e28d80d34bb14e8
(4) 0x4c6e573ffa0cfedef4f902b4a047fff2454ec015
(5) 0x2c1cc6465e8b44eafa7b14e8617268907e4eac92
(6) 0xf6e69bce0412dfa4bee1a9a8f77efbb3571a73cf
(7) 0xd07a3956a3b02743dd4776992fb9682e725b3a0c
(8) 0x176c56282d4b45175697b88ca69f20a61376d0a9
(9) 0x3562f562d24d3bebb5ae1f8b273c1d947fc13a25

Private Keys
==================
(0) 0d98c9a1ae5e77221fe9df0f0e84a3ba577d3b2404b35e66858632200eb73590
(1) 8a02896f01fa0e1ba32ef7a08ee5e714b016affba39ba10f55d65a41e1ced4d0
(2) 6f358cf8f7a6711fc4a28aca572f086e49f2f6c6fc6c293b8ca392616cc6ee81
(3) abd76126a51af43af5b1ceb4b7dffeb57faca031ced23a3acb0d9f0735b79942
(4) 87a9f3dd6ed0f8a7f5ea4ab09c7bb12d2ebfb41d34aa2e0a6b2fc07b75ab3653
(5) 5db730fafbce064a6933d9feabacd872b1d197c6f3124e6dedd9a87f787dc52c
(6) b27b8690c349ca17300feba311f5407d066d56d8d3c290fd944ebee183ec4e48
(7) 2a3de6a7bce44347e14a8855a3e204d32f4a942b694889fad53afb99decc9fad
(8) a8420478fce10715a28f64e77e56edf96b26255e367dae488e4d6e492e5bbbed
(9) 25bd9f40961eac6e83b0b789dd9c63d727f8db9aeabea4eed7339c97da7ec824

HD Wallet
==================
Mnemonic:      size air tattoo execute control crawl dumb impulse bulk cart oblige wolf
Base HD Path:  m/44'/60'/0'/0/{account_index}

Listening on localhost:8545

----


=== ethereumJS helpeth: A command line utility

helpeth is a command line tool for key and transaction manipulation that makes a developer's job a lot easier.

It is part of the ethereumjs collection of Javascript based libraries and tools.

https://github.com/ethereumjs/helpeth

----
Usage: helpeth [command]

Commands:
  signMessage <message>                     Sign a message
  verifySig <hash> <sig>                    Verify signature
  verifySigParams <hash> <r> <s> <v>        Verify signature parameters
  createTx <nonce> <to> <value> <data>      Sign a transaction
  <gasLimit> <gasPrice>
  assembleTx <nonce> <to> <value> <data>    Assemble a transaction from its
  <gasLimit> <gasPrice> <v> <r> <s>         components
  parseTx <tx>                              Parse raw transaction
  keyGenerate [format] [icapdirect]         Generate new key
  keyConvert                                Convert a key to V3 keystore format
  keyDetails                                Print key details
  bip32Details <path>                       Print key details for a given path
  addressDetails <address>                  Print details about an address
  unitConvert <value> <from> <to>           Convert between Ethereum units

Options:
  -p, --private      Private key as a hex string                        [string]
  --password         Password for the private key                       [string]
  --password-prompt  Prompt for the private key password               [boolean]
  -k, --keyfile      Encoded key file                                   [string]
  --show-private     Show private key details                          [boolean]
  --mnemonic         Mnemonic for HD key derivation                     [string]
  --version          Show version number                               [boolean]
  --help             Show help                                         [boolean]
----

=== dapp.tools

https://dapp.tools/

Installing:
----
$ curl https://nixos.org/nix/install | sh
$ nix-channel --add https://nix.dapphub.com/pkgs/dapphub
$ nix-channel --update
$ nix-env -iA dapphub.{dapp,seth,hevm,evmdis}
----

==== Dapp
https://dapp.tools/dapp/

==== Seth
https://dapp.tools/seth/

==== Hevm
https://dapp.tools/hevm/

== Libraries

=== pyethereum

=== EthereumJS
